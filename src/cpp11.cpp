// Generated by cpp11: do not edit by hand


#include "cpp11/declarations.hpp"

// dev_metrics.h
doubles dev_string_widths_c(strings string, strings family, integers face, doubles size, doubles cex, integers unit);
extern "C" SEXP _systemfonts_dev_string_widths_c(SEXP string, SEXP family, SEXP face, SEXP size, SEXP cex, SEXP unit) {
  BEGIN_CPP11
    return cpp11::as_sexp(dev_string_widths_c(cpp11::unmove(cpp11::as_cpp<strings>(string)), cpp11::unmove(cpp11::as_cpp<strings>(family)), cpp11::unmove(cpp11::as_cpp<integers>(face)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(cex)), cpp11::unmove(cpp11::as_cpp<integers>(unit))));
  END_CPP11
}
// dev_metrics.h
writable::data_frame dev_string_metrics_c(strings string, strings family, integers face, doubles size, doubles cex, integers unit);
extern "C" SEXP _systemfonts_dev_string_metrics_c(SEXP string, SEXP family, SEXP face, SEXP size, SEXP cex, SEXP unit) {
  BEGIN_CPP11
    return cpp11::as_sexp(dev_string_metrics_c(cpp11::unmove(cpp11::as_cpp<strings>(string)), cpp11::unmove(cpp11::as_cpp<strings>(family)), cpp11::unmove(cpp11::as_cpp<integers>(face)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(cex)), cpp11::unmove(cpp11::as_cpp<integers>(unit))));
  END_CPP11
}
// emoji.h
void load_emoji_codes_c(integers all, integers default_text, integers base_mod);
extern "C" SEXP _systemfonts_load_emoji_codes_c(SEXP all, SEXP default_text, SEXP base_mod) {
  BEGIN_CPP11
    load_emoji_codes_c(cpp11::unmove(cpp11::as_cpp<integers>(all)), cpp11::unmove(cpp11::as_cpp<integers>(default_text)), cpp11::unmove(cpp11::as_cpp<integers>(base_mod)));
    return R_NilValue;
  END_CPP11
}
// emoji.h
list emoji_split_c(strings string, strings path, integers index);
extern "C" SEXP _systemfonts_emoji_split_c(SEXP string, SEXP path, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(emoji_split_c(cpp11::unmove(cpp11::as_cpp<strings>(string)), cpp11::unmove(cpp11::as_cpp<strings>(path)), cpp11::unmove(cpp11::as_cpp<integers>(index))));
  END_CPP11
}
// font_matching.h
list match_font_c(strings family, logicals italic, logicals bold);
extern "C" SEXP _systemfonts_match_font_c(SEXP family, SEXP italic, SEXP bold) {
  BEGIN_CPP11
    return cpp11::as_sexp(match_font_c(cpp11::unmove(cpp11::as_cpp<strings>(family)), cpp11::unmove(cpp11::as_cpp<logicals>(italic)), cpp11::unmove(cpp11::as_cpp<logicals>(bold))));
  END_CPP11
}
// font_matching.h
writable::data_frame system_fonts_c();
extern "C" SEXP _systemfonts_system_fonts_c() {
  BEGIN_CPP11
    return cpp11::as_sexp(system_fonts_c());
  END_CPP11
}
// font_matching.h
void reset_font_cache_c();
extern "C" SEXP _systemfonts_reset_font_cache_c() {
  BEGIN_CPP11
    reset_font_cache_c();
    return R_NilValue;
  END_CPP11
}
// font_metrics.h
writable::data_frame get_font_info_c(strings path, integers index, doubles size, doubles res);
extern "C" SEXP _systemfonts_get_font_info_c(SEXP path, SEXP index, SEXP size, SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_font_info_c(cpp11::unmove(cpp11::as_cpp<strings>(path)), cpp11::unmove(cpp11::as_cpp<integers>(index)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(res))));
  END_CPP11
}
// font_metrics.h
writable::data_frame get_glyph_info_c(strings glyphs, strings path, integers index, doubles size, doubles res);
extern "C" SEXP _systemfonts_get_glyph_info_c(SEXP glyphs, SEXP path, SEXP index, SEXP size, SEXP res) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_glyph_info_c(cpp11::unmove(cpp11::as_cpp<strings>(glyphs)), cpp11::unmove(cpp11::as_cpp<strings>(path)), cpp11::unmove(cpp11::as_cpp<integers>(index)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(res))));
  END_CPP11
}
// font_registry.h
void register_font_c(strings family, strings paths, integers indices, strings features, integers settings);
extern "C" SEXP _systemfonts_register_font_c(SEXP family, SEXP paths, SEXP indices, SEXP features, SEXP settings) {
  BEGIN_CPP11
    register_font_c(cpp11::unmove(cpp11::as_cpp<strings>(family)), cpp11::unmove(cpp11::as_cpp<strings>(paths)), cpp11::unmove(cpp11::as_cpp<integers>(indices)), cpp11::unmove(cpp11::as_cpp<strings>(features)), cpp11::unmove(cpp11::as_cpp<integers>(settings)));
    return R_NilValue;
  END_CPP11
}
// font_registry.h
void clear_registry_c();
extern "C" SEXP _systemfonts_clear_registry_c() {
  BEGIN_CPP11
    clear_registry_c();
    return R_NilValue;
  END_CPP11
}
// font_registry.h
writable::data_frame registry_fonts_c();
extern "C" SEXP _systemfonts_registry_fonts_c() {
  BEGIN_CPP11
    return cpp11::as_sexp(registry_fonts_c());
  END_CPP11
}
// string_metrics.h
list get_string_shape_c(strings string, integers id, strings path, integers index, doubles size, doubles res, doubles lineheight, integers align, doubles hjust, doubles vjust, doubles width, doubles tracking, doubles indent, doubles hanging, doubles space_before, doubles space_after);
extern "C" SEXP _systemfonts_get_string_shape_c(SEXP string, SEXP id, SEXP path, SEXP index, SEXP size, SEXP res, SEXP lineheight, SEXP align, SEXP hjust, SEXP vjust, SEXP width, SEXP tracking, SEXP indent, SEXP hanging, SEXP space_before, SEXP space_after) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_string_shape_c(cpp11::unmove(cpp11::as_cpp<strings>(string)), cpp11::unmove(cpp11::as_cpp<integers>(id)), cpp11::unmove(cpp11::as_cpp<strings>(path)), cpp11::unmove(cpp11::as_cpp<integers>(index)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(res)), cpp11::unmove(cpp11::as_cpp<doubles>(lineheight)), cpp11::unmove(cpp11::as_cpp<integers>(align)), cpp11::unmove(cpp11::as_cpp<doubles>(hjust)), cpp11::unmove(cpp11::as_cpp<doubles>(vjust)), cpp11::unmove(cpp11::as_cpp<doubles>(width)), cpp11::unmove(cpp11::as_cpp<doubles>(tracking)), cpp11::unmove(cpp11::as_cpp<doubles>(indent)), cpp11::unmove(cpp11::as_cpp<doubles>(hanging)), cpp11::unmove(cpp11::as_cpp<doubles>(space_before)), cpp11::unmove(cpp11::as_cpp<doubles>(space_after))));
  END_CPP11
}
// string_metrics.h
doubles get_line_width_c(strings string, strings path, integers index, doubles size, doubles res, logicals include_bearing);
extern "C" SEXP _systemfonts_get_line_width_c(SEXP string, SEXP path, SEXP index, SEXP size, SEXP res, SEXP include_bearing) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_line_width_c(cpp11::unmove(cpp11::as_cpp<strings>(string)), cpp11::unmove(cpp11::as_cpp<strings>(path)), cpp11::unmove(cpp11::as_cpp<integers>(index)), cpp11::unmove(cpp11::as_cpp<doubles>(size)), cpp11::unmove(cpp11::as_cpp<doubles>(res)), cpp11::unmove(cpp11::as_cpp<logicals>(include_bearing))));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _systemfonts_clear_registry_c();
extern SEXP _systemfonts_dev_string_metrics_c(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_dev_string_widths_c(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_emoji_split_c(SEXP, SEXP, SEXP);
extern SEXP _systemfonts_get_font_info_c(SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_get_glyph_info_c(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_get_line_width_c(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_get_string_shape_c(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_load_emoji_codes_c(SEXP, SEXP, SEXP);
extern SEXP _systemfonts_match_font_c(SEXP, SEXP, SEXP);
extern SEXP _systemfonts_register_font_c(SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _systemfonts_registry_fonts_c();
extern SEXP _systemfonts_reset_font_cache_c();
extern SEXP _systemfonts_system_fonts_c();

static const R_CallMethodDef CallEntries[] = {
    {"_systemfonts_clear_registry_c",     (DL_FUNC) &_systemfonts_clear_registry_c,      0},
    {"_systemfonts_dev_string_metrics_c", (DL_FUNC) &_systemfonts_dev_string_metrics_c,  6},
    {"_systemfonts_dev_string_widths_c",  (DL_FUNC) &_systemfonts_dev_string_widths_c,   6},
    {"_systemfonts_emoji_split_c",        (DL_FUNC) &_systemfonts_emoji_split_c,         3},
    {"_systemfonts_get_font_info_c",      (DL_FUNC) &_systemfonts_get_font_info_c,       4},
    {"_systemfonts_get_glyph_info_c",     (DL_FUNC) &_systemfonts_get_glyph_info_c,      5},
    {"_systemfonts_get_line_width_c",     (DL_FUNC) &_systemfonts_get_line_width_c,      6},
    {"_systemfonts_get_string_shape_c",   (DL_FUNC) &_systemfonts_get_string_shape_c,   16},
    {"_systemfonts_load_emoji_codes_c",   (DL_FUNC) &_systemfonts_load_emoji_codes_c,    3},
    {"_systemfonts_match_font_c",         (DL_FUNC) &_systemfonts_match_font_c,          3},
    {"_systemfonts_register_font_c",      (DL_FUNC) &_systemfonts_register_font_c,       5},
    {"_systemfonts_registry_fonts_c",     (DL_FUNC) &_systemfonts_registry_fonts_c,      0},
    {"_systemfonts_reset_font_cache_c",   (DL_FUNC) &_systemfonts_reset_font_cache_c,    0},
    {"_systemfonts_system_fonts_c",       (DL_FUNC) &_systemfonts_system_fonts_c,        0},
    {NULL, NULL, 0}
};
}

void export_cache_store(DllInfo* dll);
void init_caches(DllInfo* dll);
void export_font_matching(DllInfo* dll);
void export_font_metrics(DllInfo* dll);
void export_string_metrics(DllInfo* dll);

extern "C" void R_init_systemfonts(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  export_cache_store(dll);
  init_caches(dll);
  export_font_matching(dll);
  export_font_metrics(dll);
  export_string_metrics(dll);
}
